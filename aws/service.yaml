Description: >
  This is an example of a long running .NET Core service.

Parameters:

  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /api/*

  Version:
    Description: The container image version to deploy
    Type: String

  ContainerImageUrl:
    Description: The URL of the container image to run
    Type: String

Resources:

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: "ecs-demo-service"
        ContainerPort: 80
        TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ecs-demo-service
      TaskRoleArn:
        Fn::GetAtt:
        - TaskRole
        - Arn
      ContainerDefinitions:
      - Name: ecs-demo-service
        Essential: true
        Image: !Join
                 - ':'
                 - - !Ref ContainerImageUrl
                   - !Ref Version
        Memory: 128
        PortMappings:
        - ContainerPort: 80
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/hello
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 2
      Conditions:
      - Field: path-pattern
        Values:
        - !Ref Path
      Actions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action:
          - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyName: ecs-service-autoscaling
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - ecs:UpdateService
            - ecs:DescribeServices
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:GetMetricStatistics
            Resource: "*"

  ServiceAutoScalingHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when the service CPU usage is above 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
      - !Ref ServiceAutoScalingPolicy
      Dimensions:
      - Name: ServiceName
        Value:
          Fn::GetAtt:
          - Service
          - Name
      - Name: ClusterName
        Value: !Ref Cluster
      ComparisonOperator: GreaterThanOrEqualToThreshold

  ServiceAutoScalingLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when service CPU usage is below 50% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      AlarmActions:
      - !Ref ServiceAutoScalingPolicy
      Dimensions:
      - Name: ServiceName
        Value:
          Fn::GetAtt:
          - Service
          - Name
      - Name: ClusterName
        Value: !Ref Cluster
      ComparisonOperator: GreaterThanOrEqualToThreshold

  ServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - "/"
        - - service
          - !Ref Cluster
          - Fn::GetAtt:
            - Service
            - Name
      RoleARN:
        Fn::GetAtt:
        - ServiceAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSDemoServiceScalingPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceAutoScalingTarget
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 2
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName: !Sub ecs-service-${AWS::StackName}
        PolicyDocument:
          {
            "Version": "2012-10-17",
            "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                              "ec2:AuthorizeSecurityGroupIngress",
                              "ec2:Describe*",
                              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                              "elasticloadbalancing:Describe*",
                              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                              "elasticloadbalancing:DeregisterTargets",
                              "elasticloadbalancing:DescribeTargetGroups",
                              "elasticloadbalancing:DescribeTargetHealth",
                              "elasticloadbalancing:RegisterTargets"
                            ],
                            "Resource": "*"
                          }]
          }

  # This IAM role grants the task access to various AWS services.
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-task-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }